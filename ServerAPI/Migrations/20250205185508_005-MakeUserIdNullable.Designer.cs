// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerAPI.DB;

#nullable disable

namespace ServerAPI.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20250205185508_005-MakeUserIdNullable")]
    partial class _005MakeUserIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ServerAPI.DB.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsBugLook")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBugSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBugWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMultiLogin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsersModify")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Access");
                });

            modelBuilder.Entity("ServerAPI.DB.Auths", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Auths");
                });

            modelBuilder.Entity("ServerAPI.DB.Dumps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("DumpFile")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("ErrorId")
                        .HasColumnType("int");

                    b.Property<long>("MemoryUsage")
                        .HasColumnType("bigint");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId")
                        .IsUnique();

                    b.ToTable("Dumps");
                });

            modelBuilder.Entity("ServerAPI.DB.Errors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorCallStack")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorGUID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ErrorMsg")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LicenseKey")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonMsg")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ErrorGUID")
                        .IsUnique();

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("ServerAPI.DB.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("License");
                });

            modelBuilder.Entity("ServerAPI.DB.LicenseKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("LicenseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KeyValue");

                    b.HasIndex("LicenseId");

                    b.ToTable("LicenseKey");
                });

            modelBuilder.Entity("ServerAPI.DB.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServerAPI.DB.Access", b =>
                {
                    b.HasOne("ServerAPI.DB.Users", "User")
                        .WithOne("Access")
                        .HasForeignKey("ServerAPI.DB.Access", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServerAPI.DB.Auths", b =>
                {
                    b.HasOne("ServerAPI.DB.Users", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServerAPI.DB.Dumps", b =>
                {
                    b.HasOne("ServerAPI.DB.Errors", "Error")
                        .WithOne("Dump")
                        .HasForeignKey("ServerAPI.DB.Dumps", "ErrorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Error");
                });

            modelBuilder.Entity("ServerAPI.DB.License", b =>
                {
                    b.HasOne("ServerAPI.DB.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServerAPI.DB.LicenseKey", b =>
                {
                    b.HasOne("ServerAPI.DB.License", "License")
                        .WithMany("LicenseKeys")
                        .HasForeignKey("LicenseId");

                    b.Navigation("License");
                });

            modelBuilder.Entity("ServerAPI.DB.Errors", b =>
                {
                    b.Navigation("Dump");
                });

            modelBuilder.Entity("ServerAPI.DB.License", b =>
                {
                    b.Navigation("LicenseKeys");
                });

            modelBuilder.Entity("ServerAPI.DB.Users", b =>
                {
                    b.Navigation("Access")
                        .IsRequired();

                    b.Navigation("Auths");
                });
#pragma warning restore 612, 618
        }
    }
}
